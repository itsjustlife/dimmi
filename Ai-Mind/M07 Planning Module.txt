Module M07: Planning Module

---
Module: M07_Planning
Version: 1.0
Purpose: Devise a sequence of actions or steps to accomplish a given goal
Triggers: [ "New_Goal_for_Planning" ]
Inputs: [ "Active_Goal from M06", "Relevant_Knowledge", "Constraints" ]
Outputs: [ "Plan_Steps", "Plan_Strategy_Notes" ]
Dependencies: [ "M08_Reasoning", "M09_Decision_Engine", "M05_Working_Memory" ]
Safety_Level: Moderate
Checksum: 09fb7794f50ff5235047848107cf1e1a
---

PURPOSE:
 The Planning Module is responsible for breaking down high-level goals into concrete, achievable steps. When the AI has a complex task, M07 figures out a strategy: what intermediate steps or sub-tasks are needed, in what order they should be done, and how to approach each. This can range from a simple two-step plan (e.g., “first search for information, then summarize it”) to a more elaborate multi-step plan with decision points. The module essentially creates a roadmap that the Decision Engine (M09) and Execution (M10) will follow. In human terms, this is analogous to your brain planning out your day or plotting a route to solve a problem before taking action.

INPUTS:
 - **Active_Goal:** The goal or task description provided by M06 that needs planning. This includes what needs to be achieved and often any key parameters (e.g., “Book a flight from X to Y on date Z” or “Answer question about topic T”). It is the primary input that requires a plan.
 - **Relevant_Knowledge:** (Optional) Any knowledge that might influence the plan. For example, if the AI knows from memory that a certain approach has worked in the past, or any constraints known. This can come from M04 (long-term memory) or M03 (short-term context) automatically. M06 or M08 might supply this if they fetched it beforehand. It's not guaranteed to be present for every plan, but if M06 or orchestrator is smart, it might provide context (like "user is in a hurry" or "no internet available" which changes planning).
 - **Constraints:** Any explicit constraints or preferences for planning. E.g., “Do it as fast as possible” or “Use minimal resources” or “Don't use external tools”. These might be derived from user instructions or safety considerations. For instance, Safety (M11) might impose a constraint "do not call certain API". Constraints could come via M06 or be global.

OUTPUTS:
 - **Plan_Steps:** A structured list of steps or actions to execute in order to achieve the goal. Each step typically has an action description and possibly details (like “Step 1: Search knowledge base for X; Step 2: Analyze results; Step 3: Draft answer.”). It might also include conditional branches if needed (“if no results found, then do Y”). For simplicity, usually linear steps are given unless advanced branching logic is needed.
 - **Plan_Strategy_Notes:** Additional notes or rationale about the plan. This might include why certain steps are in that order, or assumptions made. It can be used by the Reflection module or to explain to the user if needed (though usually internal). It might also include any identified risks or things to watch (like “Note: ensure result passes safety check at step 3”). These notes are not direct steps but meta-information.
 - Once the plan is output, M09 will consume Plan_Steps to start deciding/executing them one by one.

DETAILED_DECISION_LOGIC:
 1. **Plan Initialization**: On receiving a new goal for planning, clear any previous plan data (particularly in M05 Working Memory, if needed, though M05 likely was cleared by M06 starting a new task). Understand the goal specifics:
    - Identify the goal type (e.g., "information query", "action execution", "creative task", etc.).
    - Determine if the goal requires multiple actions. If the goal is very straightforward (like "tell me the weather right now"), the planner might decide that no multi-step plan is needed (just one direct step: call weather API and answer). In such case, it could either output a single-step plan or signal to skip detailed planning. (Alternate_Next output in YAML hints if it's simple maybe we go direct to M08).
    - If it’s complex, proceed with multi-step planning.
 2. **Sub-Goal Decomposition**:
    - Break the goal into sub-tasks:
      - Start by asking: what is the first thing needed to achieve this? For example, if the goal is to answer a complicated question, sub-tasks might be: 1) gather information, 2) synthesize it, 3) form answer.
      - If the goal is perform an operation (like booking a flight): 1) gather user preferences (if not provided), 2) search flights, 3) choose best flight, 4) book it.
      - Use any relevant knowledge: e.g., if memory says "the user likes short answers", planning might include a step to "keep summary concise".
      - Also consider constraints: if a constraint says "no internet", a plan step that would require an internet search must be replaced with an alternative (like use offline data or apologize for inability).
    - List out steps in a logical order. Each step should be something the AI (or a tool it has) can actually do.
    - Keep steps high-level enough for decision module to understand but detailed enough to guide it. For instance, "search for flights" is good. Just "get information" might be too vague unless obvious.
    - Limit the number of steps to a reasonable count (maybe 3-7). If it’s extremely complex, include sub-steps or a loop concept, but our architecture expects a finite list that M09 can iterate.
 3. **Incorporate Decision Points**:
    - If certain steps depend on outcomes (like if step 2 might branch depending on success or failure), note that.
    - The plan can include conditional notes like "If no flights found, inform user to broaden search." These are strategy notes for later use by M09 or M08.
    - Typically, you can assume success path in Plan_Steps and rely on M09/M10 to handle exceptions via alternate next or replan triggers.
 4. **Safety & Alignment Check in Plan**:
    - Evaluate the plan against safety constraints. For example, if one step was "scrape data from website Y", but policy might not allow that, either remove or modify that step preemptively.
    - Also if there's an obviously problematic action, the planner should catch it here before execution. This is a second layer after M11’s initial oversight. (M11 will still check at execution time, but the planner can avoid generating unsafe steps).
    - If needed, add a step like "Ask user for permission" if an action is sensitive (though this might be done by M09/M14 in practice).
 5. **Output Plan**:
    - Format the steps clearly (e.g., a numbered list or an array of step descriptions).
    - Provide `Plan_Strategy_Notes` if beneficial: e.g., "Because the user asked for a summary, the plan includes a step to generate a concise summary. Will need to verify facts in step 2." These can help the AI’s reasoning or later reflection to know why decisions were made.
    - If the goal turned out trivial (no multi-step required), `Plan_Steps` could be just one step or even a pseudo-step saying "Direct handling by reasoning module". Additionally, you might use the Alternate_Next in YAML (which suggests M08 direct) to indicate skipping M09/M10 loops. However, typically, even a single step plan goes through M09 for execution.
    - Activate the plan by notifying Working Memory (M05) of the steps (could output the steps which M05 picks up as context).
    - The next module in flow is M09 (Decision Engine), which will take these steps and start executing them one by one, consulting Reasoning (M08) and Execution (M10) as needed per step.

RECURSION_CHECKS:
 - The Planning module should not recursively call itself (no self-trigger). It produces a plan and hands off.
 - If a plan fails and a new plan is needed (like a replan after reflection), that would be triggered anew from M06/M12, not done internally here in a loop.
 - Avoid getting stuck devising an overly long or detailed plan. It should lean toward an MVP plan that can be adjusted if needed, rather than paralysis by analysis. (E.g., do not plan out 20 steps if unsure; plan a few, then perhaps mark a step like "re-evaluate plan after step 3").
 - The planner uses Reasoning (M08) potentially to simulate or verify steps while planning. We did not explicitly detail that, but dependency suggests it could. If using M08 within planning (like to evaluate if a step is feasible), be cautious: that could theoretically get into a loop if not controlled. Usually, planning should be a quick, heuristic process. If needed, one could call M08 to check something minor and then continue planning, not letting M08 take over fully until execution.

CHANGE_INSTRUCTIONS:
 - **Adjust plan granularity**: If you find that the steps are often either too broad or too granular, adjust the logic. For broader steps, combine some steps; for more granularity, split them. For example, if users often want detailed progress, you might break steps down further so the AI can report progress at finer intervals. Conversely, if too many steps are unnecessary, combine them.
 - **Domain-specific templates**: If the AI is used in a specific domain frequently (e.g., travel booking, or coding, etc.), you might incorporate template plans. E.g., for "travel booking" always do steps A, B, C. You can implement recognition: if goal matches a known pattern, load a predefined plan structure. This can make planning faster and more reliable. Implement checks in step 2 and substitute accordingly.
 - **Using reasoning in planning**: To improve plan quality, you might explicitly query M08 for certain projections. For instance, after drafting a plan, you could use M08 to sanity-check: "Will this plan likely succeed? Any obvious issues?" Then incorporate that feedback. This is advanced and requires orchestrating a mini-call to M08 inside M07. If you do so, ensure to prevent infinite loops (M08 should know it's in planning context to not itself trigger another plan). Usually, it's safer to keep that within this module's logic simply by using heuristics or known rules.
 - **Coordination with Decision Engine**: If you change the format of Plan_Steps (say from plain text list to a JSON with each step detail), update M09’s logic to parse and handle it. Similarly, any numbering or labeling of steps – ensure consistency (e.g., "Step 1, Step 2" vs index array).
 - **Multi-outcome planning**: If you want to implement more branching (like an if/else in plans), you might represent steps as nodes with conditions. This is complex to execute later but possible. If implemented, clearly annotate conditions in the Plan_Steps and ensure M09 can interpret them. For now, our approach is mostly linear with potential re-evaluation after each step by M09.
 - **Parallel steps**: If some steps could be parallelized (like doing two info-gathering tasks at once), currently the system doesn’t support concurrency well, but you might note it in Strategy ("Steps 1 and 2 could be done in any order"). M09 is single-threaded in execution by design, so implementing actual parallel execution would be a major change.
 - Always bump **Version** and recalc **Checksum** with any change. Communicate changes to Plan format to any modules that consume the plan (M09, M05 for context, etc.).

---
Next_Suggest: M09_Decision_Engine
Alternate_Next: M08_Reasoning (if no multi-step plan is required)
Resource_Usage: Moderate (some reasoning overhead to create plans; usually quick relative to execution)
---