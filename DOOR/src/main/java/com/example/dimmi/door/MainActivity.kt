package com.example.dimmi.door\n\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.Home\nimport androidx.compose.material.icons.filled.Info\nimport androidx.compose.material.icons.filled.Menu\nimport androidx.compose.material.icons.filled.Settings\nimport androidx.compose.material3.* // ktlint-disable no-wildcard-imports\nimport androidx.compose.runtime.* // ktlint-disable no-wildcard-imports\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.navigation.NavHostController\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.rememberNavController\n\n// Define navigation routes\nsealed class Screen(val route: String, val label: String, val icon: ImageVector) {\n    object Home : Screen(\"home\", \"Home\", Icons.Filled.Home)\n    object Settings : Screen(\"settings\", \"Settings\", Icons.Filled.Settings)\n    object About : Screen(\"about\", \"About\", Icons.Filled.Info)\n}\n\nval menuItems = listOf(Screen.Home, Screen.Settings, Screen.About)\n\nclass MainActivity : ComponentActivity() {\n    @OptIn(ExperimentalMaterial3Api::class)\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            DimmiDOORTheme {\n                val navController = rememberNavController()\n                var currentScreenTitle by remember { mutableStateOf(Screen.Home.label) }\n                var drawerOpen by remember { mutableStateOf(false) }\n\n                ModalNavigationDrawer(\n                    drawerState = if (drawerOpen) DrawerState(DrawerValue.Open) else DrawerState(DrawerValue.Closed),\n                    onDrawerStateChange = { drawerOpen = it == DrawerValue.Open },\n                    drawerContent = {\n                        ModalDrawerSheet {\n                            Spacer(Modifier.height(12.dp))\n                            menuItems.forEach { screen ->\n                                NavigationDrawerItem(\n                                    icon = { Icon(screen.icon, contentDescription = screen.label) },\n                                    label = { Text(screen.label) },\n                                    selected = screen.label == currentScreenTitle,\n                                    onClick = {\n                                        navController.navigate(screen.route) {\n                                            popUpTo(navController.graph.startDestinationId) {\n                                                saveState = true\n                                            }\n                                            launchSingleTop = true\n                                            restoreState = true\n                                        }\n                                        currentScreenTitle = screen.label\n                                        drawerOpen = false\n                                    },\n                                    modifier = Modifier.padding(NavigationDrawerItemDefaults.ItemPadding)\n                                )\n                            }\n                        }\n                    }\n                ) {\n                    Scaffold(\n                        topBar = {\n                            TopAppBar(\n                                title = { Text(currentScreenTitle) },\n                                navigationIcon = {\n                                    IconButton(onClick = { drawerOpen = !drawerOpen }) {\n                                        Icon(Icons.Filled.Menu, contentDescription = \"Menu\")\n                                    }\n                                }\n                            )\n                        }\n                    ) {\ paddingValues ->\n                        AppNavigationHost(navController = navController, modifier = Modifier.padding(paddingValues))\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun AppNavigationHost(navController: NavHostController, modifier: Modifier = Modifier) {\n    NavHost(navController = navController, startDestination = Screen.Home.route, modifier = modifier) {\n        composable(Screen.Home.route) { HomeScreen() }\n        composable(Screen.Settings.route) { SettingsScreen() }\n        composable(Screen.About.route) { AboutScreen() }\n    }\n}\n\n@Composable\nfun HomeScreen() {\n    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n        Text(\"Welcome to Home Screen!\")\n    }\n}\n\n@Composable\nfun SettingsScreen() {\n    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n        Text(\"Settings Screen\")\n    }\n}\n\n@Composable\nfun AboutScreen() {\n    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n        Text(\"About This App\")\n    }\n}\n\n@Preview(showBackground = true)\n@Composable\nfun DefaultPreview() {\n    DimmiDOORTheme {\n        // You can preview a specific screen or the whole MainActivity UI structure here\n        // For simplicity, just showing the HomeScreen for preview\n        HomeScreen()\n    }\n}\n\n// Basic Theme (can be expanded)\n@Composable\nfun DimmiDOORTheme(content: @Composable () -> Unit) {\n    MaterialTheme(\n        colorScheme = lightColorScheme(), // Or darkColorScheme()\n        typography = Typography(),\n        content = content\n    )\n}\n