Module M10: Action Execution Module

---
Module: M10_Action_Execution
Version: 1.0
Purpose: Carry out external actions or tool calls as directed by the Decision Engine and return results
Triggers: [ "External_Action_Command" ]
Inputs: [ "Action_Description from M09" ]
Outputs: [ "Action_Result", "Execution_Status" ]
Dependencies: [ "M11_Safety_Alignment" ]
Safety_Level: High
Checksum: c431a80e861177e2f4ca57b8f3d590da
---

PURPOSE:
 The Action Execution Module serves as the interface between the AI’s cognitive processes and the outside world (or any external tools/APIs). When the AI needs to perform an action that goes beyond pure reasoning – such as fetching information from the internet, querying a database, sending an email, or any command that affects external state – M10 is responsible. It translates high-level action descriptions from M09 into concrete operations, executes them, and gathers the results. In essence, M10 is like the AI’s hands and eyes: it can do things and observe outcomes, but it only does exactly what it’s told by the Decision Engine, and nothing more (for safety reasons). This separation ensures that potentially risky operations are centrally vetted and logged.

INPUTS:
 - **Action_Description:** A directive from M09 specifying what action to perform. This could be in a structured format or natural language instruction interpreted by this module. Examples:
   - “SearchWeb: 'latest news on AI'” – indicating a web search query.
   - “CallAPI: weather_service with location=London” – an API call to get weather.
   - “FileWrite: filename.txt content='Hello'” – to write to a file (depending on allowed capabilities).
   - “NoOp” – a no-operation (for instances where no external action is actually needed, but structure requires going through execution).
   - We restrict to allowed actions. M09’s safety checks plus M11 ensure disallowed actions (like reading/writing sensitive system files, or executing arbitrary code) are filtered.
 - The input should ideally be structured enough so M10 knows which tool or subsystem to use. If only natural language, M10 would need to parse it (for which it could have internal simple parser or lookup table of action keywords).

OUTPUTS:
 - **Action_Result:** The outcome of the action. Its format depends on the action:
   - For a search, it might be the top results or snippet of info.
   - For an API call, the response data (possibly processed into a simpler form).
   - For a file operation, success confirmation or error message.
   - If the action was simply to “present info to user”, the result might be just confirmation it was done (though user presentation is typically M14’s domain, not M10).
   - If the action could not be performed or failed, the result should indicate that (and Execution_Status might reflect failure).
 - **Execution_Status:** A status code or message indicating success/failure of the execution.
   - e.g., “success”, “failed: network error”, “denied by safety policy”.
   - This helps M09 decide what to do next.
   - In case of failure due to safety (M11 intervention or internal block), clearly state that so M09 can handle accordingly (likely abort or modify plan).
 - All outputs are returned to M09, which triggered the action, so that M09 can feed it into the decision loop.

DETAILED_DECISION_LOGIC:
 1. **Parse Action Description**:
    - Determine what type of action it is. This likely involves parsing a prefix or format:
      - If it's structured like “TYPE: details”, split on the delimiter.
      - If not structured, possibly use keywords. (Given design, we expect a known format from M09 to avoid ambiguity.)
    - Confirm the parameters and target of the action. For example:
      - For a search, extract the query string.
      - For an API call, identify which API and parameters.
      - For a tool usage, gather necessary info (like if asked to run a calculation, but that usually would be M08’s job, not M10).
    - If the action description is not recognized or seems incomplete, set Execution_Status to failed (“unknown action”) and short-circuit output (since we can’t execute what we don’t understand).
 2. **Safety Pre-check**:
    - Before executing, do a final sanity check (in addition to M09’s checks):
      - If action involves external calls, ensure the destination is allowed (e.g., only call whitelisted APIs).
      - If writing to file, ensure the path is within an allowed directory (and we have permission).
      - If any parameter looks suspicious (like extremely long strings or code injection attempts if user somehow influenced it), sanitize or refuse.
      - Possibly call M11’s function if available like M11 can validate an action contextually (since M11 might have global knowledge of what's not allowed).
    - If any safety concern arises, abort the action:
      - Execution_Status = “blocked_by_safety: [reason]”.
      - Action_Result can be null or a brief “Not executed”.
      - Return to M09 without doing it.
    - Otherwise, proceed.
 3. **Perform Action**:
    - Depending on action type, call the appropriate function:
      - e.g., `perform_web_search(query)` or `call_api(name, params)` or `write_file(name, content)`.
    - Implement the integration here. In a prototype, this might be stubbed (since actual web access might not be permitted in environment). In practice, it would interface with external services or system commands.
    - Monitor for exceptions or errors:
      - If something throws (like network error, or API returns error code), catch it.
      - Set Execution_Status accordingly (success or failure).
      - If success and data is returned, store in Action_Result.
      - If partial success (some data but with warnings), include those in result or status.
    - If the action is time-consuming or asynchronous, in this architecture it’s likely synchronous (the AI waits for result). If we had a design for async, M10 might immediately return a “started” status and later provide result, but that complicates flow. We'll assume actions complete within a cycle.
 4. **Format Result**:
    - Make sure the Action_Result is in a form that’s useful for subsequent modules:
      - If it’s raw JSON from an API, perhaps simplify it or extract needed fields (unless M09 or M08 expects raw data).
      - If it’s a lot of text (like search results), maybe truncate or summarize main points.
      - Add any metadata if needed (e.g., source of info if relevant).
    - Keep it concise to what's needed for the plan to continue.
    - Example: Searching web for "AI news" might return 10 headlines. Possibly limit to top 3 relevant ones as a list.
 5. **Output to Decision Engine**:
    - Send back the Action_Result and Execution_Status.
    - If Execution_Status is not "success", M09 will interpret that and likely adjust the course (like try an alternate or fail gracefully).
    - If success, M09 will feed the result into the next step (or if it was final, into the answer).
    - The outputs might also be logged to memory or reflection (e.g., M03 could log "executed action X, got Y").
    - Ensure not to directly pass any sensitive data along unless necessary (safety again).
 
RECURSION_CHECKS:
 - M10 shouldn’t directly call any cognitive modules (like it doesn’t call M08 or M09 itself). It’s an endpoint for execution.
 - Avoid any scenario where an action triggers another goal unintentionally. For instance, if an external action involves an AI or triggers conversation somewhere else, we treat that as outside scope; M10 just returns the result.
 - If an action inadvertently calls back into the system (not typical), ensure there's a control to avoid endless loop (like the system messaging itself).
 - Rate-limit or time-limit actions as needed. If an external call is taking too long, consider timing out and returning failure so the cognitive loop doesn’t hang indefinitely.

CHANGE_INSTRUCTIONS:
 - **Add new action types**: If the AI gets new tool abilities, update the parsing logic and execution logic to handle them.
   - E.g., if we add "EmailSend" action or "DatabaseQuery", include cases for those in step 3.
   - Also update safety checks for those (like allowed email recipients or DB tables).
 - **Integration with real APIs**: Currently, maybe you stubbed search with a placeholder. To integrate a real search API, put the actual call in perform_web_search. Likewise for others.
   - Keep API keys or credentials secure; might need config that M10 reads (not hard-coded in these files if they can be separated).
   - Ensure to parse API response and fit into Action_Result nicely.
 - **Error handling improvements**: Expand on how errors are caught and described. Perhaps maintain a mapping of common error types to user-friendly messages or specific status codes.
 - **Logging**: For auditing, you might want M10 to log all actions and their results somewhere (especially because Safety_Level is High, so audits are useful). This could be an append to a log file or sending a summary to memory.
   - E.g., after each action, output a log line to a file or to M04 (though long-term memory isn't ideal for logging every trivial action).
   - If doing so, ensure sensitive info (like API keys in the call) are not logged or are sanitized.
 - **Permissions**: If running in an environment with limited permissions, tailor what M10 can do accordingly. Maybe disable file operations, or restrict web access. Document these limits so the rest of the system knows (like M07 should plan accordingly).
 - **Alternate results**: Some actions might produce multiple possible outputs (like multiple search results). Decide if M10 should pick one, or return all. Currently, returning a collection and letting reasoning decide might be safer.
   - If adjusting, be consistent: e.g., Action_Result can sometimes be a list. Ensure M09/M08 can handle that (likely yes, M08 can pick from list if needed).
 - Update **Version** and **Checksum** with any modifications. Communicate any changes in format or behavior to M09 (so it expects them).

---
Next_Suggest: (None – end of execution, results go back to M09)
Alternate_Next: (None)
Resource_Usage: Moderate to High (depends on action; e.g., web calls or file I/O take external resources/time)
---
